/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package miniludoteca.vista;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import miniludoteca.modelo.Historico;
import miniludoteca.modelo.Jugador;

/**
 *
 * @author jvigual
 */
public class Principal extends javax.swing.JFrame {
    public static final String BLACKJACK = "BlackJack";
    public static final String SIETEYMEDIA = "SieteYMedia";
    private Historico historico;
    
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        
        this.historico = new Historico();
        
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mensajeLabel = new javax.swing.JLabel();
        jugarLabel = new javax.swing.JButton();
        historicoLabel = new javax.swing.JButton();
        clasificacionLabel = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        cargarMenuItem = new javax.swing.JMenuItem();
        guardarMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Miniludoteca");

        mensajeLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        mensajeLabel.setText("¡Bienvenido a la Miniludoteca! ¿Qué quieres hacer?");

        jugarLabel.setIcon(new javax.swing.ImageIcon("/Users/jvigual/NetBeansProjects/Miniludoteca/images/play.png")); // NOI18N
        jugarLabel.setText("Jugar");
        jugarLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jugarLabelActionPerformed(evt);
            }
        });

        historicoLabel.setIcon(new javax.swing.ImageIcon("/Users/jvigual/NetBeansProjects/Miniludoteca/images/time_machine.png")); // NOI18N
        historicoLabel.setText("Histórico");
        historicoLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historicoLabelActionPerformed(evt);
            }
        });

        clasificacionLabel.setIcon(new javax.swing.ImageIcon("/Users/jvigual/NetBeansProjects/Miniludoteca/images/classification.png")); // NOI18N
        clasificacionLabel.setText("Clasificación");
        clasificacionLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clasificacionLabelActionPerformed(evt);
            }
        });

        jMenu1.setText("Archivo");

        cargarMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        cargarMenuItem.setText("Cargar");
        cargarMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(cargarMenuItem);

        guardarMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        guardarMenuItem.setText("Guardar");
        guardarMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(guardarMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(historicoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jugarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(clasificacionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(mensajeLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {clasificacionLabel, historicoLabel, jugarLabel});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mensajeLabel)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jugarLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(historicoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clasificacionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cargarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarMenuItemActionPerformed
        JFileChooser selectorFichero = new JFileChooser();
        selectorFichero.setDialogTitle("Cargar Información");
        selectorFichero.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        int resultado = selectorFichero.showOpenDialog(this);
        if (resultado == JFileChooser.APPROVE_OPTION) {
            try {
                FileInputStream fis = new FileInputStream(selectorFichero.getSelectedFile().getAbsolutePath());
                BufferedInputStream bis = new BufferedInputStream(fis);
                ObjectInputStream ois = new ObjectInputStream(bis);
                
                this.historico = (Historico) ois.readObject();
                this.historico.establecerPartidasTotales();
                
                ois.close();
                
                JOptionPane.showMessageDialog(this, "Fichero cargado", "Cargar Información", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Fichero NO cargado", "Cargar Información", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_cargarMenuItemActionPerformed

    private void guardarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarMenuItemActionPerformed
        JFileChooser selectorFichero = new JFileChooser();
        selectorFichero.setDialogTitle("Guardar Información");
        selectorFichero.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        int resultado = selectorFichero.showSaveDialog(this);
        if (resultado == JFileChooser.APPROVE_OPTION) {
            try {
                FileOutputStream fos = new FileOutputStream(selectorFichero.getSelectedFile().getAbsolutePath());
                BufferedOutputStream bos = new BufferedOutputStream(fos);
                ObjectOutputStream oos = new ObjectOutputStream(bos);
                
                oos.writeObject(this.historico);
                oos.flush();
                
                oos.close();
                
                JOptionPane.showMessageDialog(this, "Fichero guardado", "Guardar Información", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Fichero NO guardado", "Guardar Información", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_guardarMenuItemActionPerformed

    private void jugarLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jugarLabelActionPerformed
        String nombre = JOptionPane.showInputDialog(this, "¿Cuál es tu nombre?", "Nombre Jugador", JOptionPane.QUESTION_MESSAGE);
        if (nombre != null) {
            Jugador jugador = this.historico.buscarJugador(nombre);

            String juego = (String) JOptionPane.showInputDialog(this, "¿A qué juego quieres jugar?", "Elegir Juego", JOptionPane.QUESTION_MESSAGE, null, new String[]{BLACKJACK, SIETEYMEDIA}, BLACKJACK);
            if (juego != null) {
                switch (juego) {
                    case BLACKJACK:
                        JugarBlackJack jugarBJ = new JugarBlackJack(jugador, historico, Historico.partidasTotales());
                        jugarBJ.setVisible(true);
                        break;
                    case SIETEYMEDIA:
                        JugarSieteYMedia jugarSM = new JugarSieteYMedia(jugador, historico, Historico.partidasTotales());
                        jugarSM.setVisible(true);
                        break;
                }
            }
        }
    }//GEN-LAST:event_jugarLabelActionPerformed

    private void historicoLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historicoLabelActionPerformed
        VistaHistorico vistaHistorico = new VistaHistorico(this.historico.jugadores());
        vistaHistorico.setVisible(true);
    }//GEN-LAST:event_historicoLabelActionPerformed

    private void clasificacionLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clasificacionLabelActionPerformed
        Clasificacion clasificacion = new Clasificacion(this.historico.jugadores());
        clasificacion.setVisible(true);
    }//GEN-LAST:event_clasificacionLabelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem cargarMenuItem;
    private javax.swing.JButton clasificacionLabel;
    private javax.swing.JMenuItem guardarMenuItem;
    private javax.swing.JButton historicoLabel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JButton jugarLabel;
    private javax.swing.JLabel mensajeLabel;
    // End of variables declaration//GEN-END:variables
}
